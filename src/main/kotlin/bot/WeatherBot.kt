package bot

import com.github.kotlintelegrambot.Bot
import com.github.kotlintelegrambot.bot
import com.github.kotlintelegrambot.dispatch
import com.github.kotlintelegrambot.dispatcher.*
import com.github.kotlintelegrambot.entities.ChatAction
import com.github.kotlintelegrambot.entities.ChatId
import com.github.kotlintelegrambot.entities.InlineKeyboardMarkup
import com.github.kotlintelegrambot.entities.TelegramFile
import com.github.kotlintelegrambot.entities.keyboard.InlineKeyboardButton
import com.github.kotlintelegrambot.logging.LogLevel
import data.remote.API_KEY
import data.remote.repository.WeatherRepository
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import java.util.logging.Filter

private const val GIF_WAITING_URL = "https://tenor.com/view/why-am-i-still-waiting-patiently-waiting-waiting-gif-12710222"
private const val BOT_ANSWER_TIMEOUT = 30
private const val BOT_TOKEN = "5988748012:AAEa0dhFLJUJXEc8L969AmdyomSmcyX78UQ"

// 1. —Ä–∞–±–æ—Ç–∞ —Å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º
class WeatherBot(private val weatherRepository: WeatherRepository) {

    private lateinit var country: String
    private var  _chatId: ChatId? = null
    private val chatId by lazy { requireNotNull(_chatId) }//–õ–∏–±–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ª–∏–±–æ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç Exceptions

    fun createBot(): Bot { // —Ñ—É–Ω–∫—Ü–∏—è –∫–æ—Ç–æ—Ä–∞—è —Å–æ–∑–¥–∞–µ—Ç –±–æ—Ç–∞
        return bot {
            timeout = BOT_ANSWER_TIMEOUT
            token = BOT_TOKEN
            logLevel = LogLevel.Error

            dispatch { // –≤–Ω—É—Ç—Ä–∏ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –º—ã –±—É–¥–µ–º –æ—Ç–≤–µ—á–∞—Ç—å –ø–æ–ª—Ç–∑–æ–≤–∞—Ç–µ–ª—é
                //text {  } // –±—É–¥–µ–º –∂–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                setUpCommands()
                setUpCallbacks()
            }
        }
    }
// —Ñ—É–Ω–∫—Ü–∏—è –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏
    private fun Dispatcher.setUpCallbacks() {
        callbackQuery (callbackData = "getMyLocation") {
            bot.sendMessage(chatId = chatId, text = "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é")
            location { //–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª–æ–∫–∞—Ü–∏—é
                CoroutineScope(Dispatchers.IO).launch {
                    val userCountryName = weatherRepository.getReversedGeocodingCountryName(
                        latitude = location.latitude.toString(),
                        longitude = location.longitude.toString(),
                        format = "json"
                    ).address.state

                    val inlineKeyboardMarkup = InlineKeyboardMarkup.create(// —Å–æ–∑–¥–∞—é –∫–Ω–æ–ø–∫–∏ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
                        listOf(
                            InlineKeyboardButton.CallbackData(
                                text = "–î–∞, –≤–µ—Ä–Ω–æ",
                                callbackData = "yes_label"
                            )
                        )
                    )
                    country = userCountryName

                    bot.sendMessage(
                        chatId = chatId,
                        text = "–¢–≤–æ–π –≥–æ—Ä–æ–¥ - ${country}, –≤–µ—Ä–Ω–æ? \n –ï—Å–ª–∏ –Ω–µ –≤–µ—Ä–Ω–æ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≥–æ—Ä–æ–¥ –µ—â–µ —Ä–∞–∑ /weather",
                        replyMarkup = inlineKeyboardMarkup  // /n –≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ else
                    )
                }
            }
        }
    callbackQuery(callbackData = "enterManually") {
        bot.sendMessage(chatId = chatId, text = "–•–æ—Ä–æ—à–æ, –≤–≤–µ–¥–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥")
        message(com.github.kotlintelegrambot.extensions.filters.Filter.Text){
            val inlineKeyboardMarkup = InlineKeyboardMarkup.create(
                listOf(
                    InlineKeyboardButton.CallbackData(
                        text = "–î–∞, –≤–µ—Ä–Ω–æ.",
                        callbackData = "yes_label"
                    )
                )
            )
            country = message.text.toString()
            bot.sendMessage(
                chatId = chatId,
                text = "–¢–≤–æ–π –≥–æ—Ä–æ–¥ - ${message.text}, –≤–µ—Ä–Ω–æ? \n –ï—Å–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ, –≤–≤–µ–¥–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥ –µ—â—ë —Ä–∞–∑.",
                replyMarkup = inlineKeyboardMarkup
            )
        }
    }
    callbackQuery(callbackData = "getWeather") {
        bot.sendMessage(chatId=chatId, text = "–ù—É–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ —Å—é–¥–∞ —Ä–∞–Ω–¥–æ–º–Ω—É—é –ø–æ–≥–æ–¥—É –æ—Ç -20 –¥–æ + 35")
    }
    callbackQuery(callbackData = "yes_label") {
        bot.apply {
            sendAnimation(chatId=chatId, animation = TelegramFile.ByUrl(GIF_WAITING_URL))
            sendMessage(chatId = chatId, text = "–£–∑–Ω–∞–µ–º –≤–∞—à—É –ø–æ–≥–æ–¥—É...")
            sendChatAction(chatId = chatId, action = ChatAction.TYPING)//—á—Ç–æ –±—ã –≤–∏–¥–µ—Ç—å —Å—Ç–∞—Ç—É—Å(–ü–µ—á–∞—Ç–∞–µ—Ç....)
        }
         //–ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–∞–ª—å–Ω–æ–≥–æ —É–∑–Ω–∞–≤–∞–Ω–∏—è –ø–æ–≥–æ–¥—ã
        CoroutineScope(Dispatchers.IO).launch {// Coroutine –∫–∞–∫ –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
            val currentWeather = weatherRepository.getCurrentWeather(
                apiKey = API_KEY,
                countryName = country, // –≤—ã–±–∏—Ä–∞—é —Å—Ç—Ä–∞–Ω—É
                airQualityData = "no"
            )
            bot.sendMessage(
                chatId=chatId,
                //"""""" - –º–µ–∂–¥—É 3 —Å—Ç–∞–≤–∏—à—å ENTER –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è .trimIndent() –∏ –º–æ–∂–Ω–æ –≤–º–µ—â–∞—Ç—å –±–æ–ª—å—à–æ–µ –∫–æ–ª-–≤–æ —Ç–µ–∫—Å—Ç–∞
                text = """     
                    ‚òÅÔ∏è –û–±–ª–∞—á–Ω–æ—Å—Ç—å: ${currentWeather.clouds}
                    üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (–≥—Ä–∞–¥—É—Å—ã): ${currentWeather.main.temp}
                    üôé ‚Äç–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: ${currentWeather.main.feels_like}
                    üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: ${currentWeather.main.humidity}
                    üå™ –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: ${currentWeather.wind.speed}
                    üß≠ –î–∞–≤–ª–µ–Ω–∏–µ: ${currentWeather.main.pressure}
                """.trimIndent()
            )

            bot.sendMessage(
                chatId=chatId,
                text ="–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–≥–æ–¥—É –µ—â–µ —Ä–∞–∑, \n –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /weather"
            )
            country = ""
        }
    }
}

    private fun Dispatcher.setUpCommands() { //–¥–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –±–æ—Ç –º–æ–≥ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω—É–∂–µ–Ω –ß–ê–¢ –ê–ô–î–ò

        // –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–¥–µ—Ç –∫–æ–º–∞–Ω–¥—É start –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è —Ç–µ–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏
        command("start") {
            _chatId = ChatId.fromId(message.chat.id)
            bot.sendMessage(
                chatId = chatId,
                text = "–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç —É–º–µ—é—â–∏–π –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–≥–æ–¥—É! \n –î–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /weather"
            )

        }

        command("weather") {
            //—Å–æ–∑–¥–∞—é –∫–Ω–æ–ø–æ—á–∫–∏ –≤ —Ç–≥
            val inlineKeyboardMarkup = InlineKeyboardMarkup.create(
                listOf(
                    InlineKeyboardButton.CallbackData(
                        text = "–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–æ–π –≥–æ—Ä–æ–¥",
                        callbackData = "getMyLocation"
                    )
                ),
                listOf(
                    InlineKeyboardButton.CallbackData(
                        text = "–í–≤–µ—Å—Ç–∏ –≥–æ—Ä–æ–¥ –≤—Ä—É—á–Ω—É—é",
                        callbackData = "enterManually"
                    )
                )
            )
            bot.sendMessage(
                chatId = chatId,
                text = "–î–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã —è —Å–º–æ–≥ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–≥–æ–¥—É, \n –º–Ω–µ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å —Ç–≤–æ–π –≥–æ—Ä–æ–¥",
                replyMarkup = inlineKeyboardMarkup
            )
        }
    }
}